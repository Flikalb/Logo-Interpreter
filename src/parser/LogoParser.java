/* Generated By:JavaCC: Do not edit this line. LogoParser.java */
package parser;

import java.util.ArrayList;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;

import error.CompilationException;
import error.CompilationErrorType;
import symbol.SymbolTable;
import syntaxtree.AbsStatementNode;
import syntaxtree.AbsValueNode;
import syntaxtree.MakeSNode;
import type.VariableName;
import java.util.Map;
import java.util.HashMap;
import java.util.SortedMap;
import java.util.TreeMap;

import interpreter.ProcedureDefinition;

import syntaxtree.AndVNode;
import syntaxtree.ArcSNode;
import syntaxtree.BackSNode;
import syntaxtree.ButFirstVNode;
import syntaxtree.ButLastVNode;
import syntaxtree.CircleSNode;
import syntaxtree.CleanSNode;
import syntaxtree.ClearScreenSNode;
import syntaxtree.DeQueueSNode;
import syntaxtree.DiffVNode;
import syntaxtree.DivVNode;
import syntaxtree.EllipseSNode;
import syntaxtree.ElseSNode;
import syntaxtree.EqualVNode;
import syntaxtree.FirstVNode;
import syntaxtree.ForSNode;
import syntaxtree.ForwardSNode;
import syntaxtree.FputVNode;
import syntaxtree.GreaterEqualVNode;
import syntaxtree.GreaterVNode;
import syntaxtree.HeadingSNode;
import syntaxtree.HideTurtleSNode;
import syntaxtree.HomeSNode;
import syntaxtree.IfElseSNode;
import syntaxtree.IfSNode;
import syntaxtree.IseqVNode;
import syntaxtree.ItemVNode;
import syntaxtree.LabelSNode;
import syntaxtree.LastVNode;
import syntaxtree.LeftSNode;
import syntaxtree.LessEqualVNode;
import syntaxtree.LessVNode;
import syntaxtree.ListDataVNode;
import syntaxtree.ListVNode;
import syntaxtree.LputVNode;
import syntaxtree.MakeSNode;
import syntaxtree.MinusVNode;
import syntaxtree.ModVNode;
import syntaxtree.NotVNode;
import syntaxtree.NotEqualVNode;
import syntaxtree.NumberVNode;
import syntaxtree.OrVNode;
import syntaxtree.PenReverseSNode;
import syntaxtree.PenVNode;
import syntaxtree.PenColorVNode;
import syntaxtree.PenDownSNode;
import syntaxtree.PenUpSNode;
import syntaxtree.PenPaintSNode;
import syntaxtree.PenEraseSNode;
import syntaxtree.PickVNode;
import syntaxtree.PopSNode;
import syntaxtree.PowerVNode;
import syntaxtree.PrintSNode;
import syntaxtree.ProcedureSNode;
import syntaxtree.ProdVNode;
import syntaxtree.PushSNode;
import syntaxtree.QueueSNode;
import syntaxtree.RemoveVNode;
import syntaxtree.RepeatSNode;
import syntaxtree.ReverseVNode;
import syntaxtree.RightSNode;
import syntaxtree.RoundVNode;
import syntaxtree.RseqVNode;
import syntaxtree.SentenceVNode;
import syntaxtree.SetBackgroundSNode;
import syntaxtree.SetPenSNode;
import syntaxtree.SetPenColorSNode;
import syntaxtree.SetPosSNode;
import syntaxtree.SetXSNode;
import syntaxtree.SetYSNode;
import syntaxtree.ShowTurtleSNode;
import syntaxtree.SinVNode;
import syntaxtree.SqrtVNode;
import syntaxtree.SumVNode;
import syntaxtree.ThenSNode;
import syntaxtree.ThingVNode;
import syntaxtree.UntilSNode;
import syntaxtree.WaitSNode;
import syntaxtree.WhileSNode;
import syntaxtree.WordDataVNode;
import syntaxtree.WordVNode;
import syntaxtree.YoudontsaySNode;
import type.VariableName;

public class LogoParser implements LogoParserConstants {

    private static SymbolTable symbolTable = new SymbolTable();
    private static Integer currentLine = 0;

    public SymbolTable getSymbolTable()
    {
      return this.symbolTable;
    }

    public SortedMap<Integer,AbsStatementNode> executeCompiler() throws CompilationException
    {
      try
      {
          SortedMap<Integer,AbsStatementNode> code = new TreeMap<Integer,AbsStatementNode>();
          this.symbolTable.clear();
          statements(code);
          return code;
        }
        catch(ParseException e)
        {
        if (e.currentToken!=null) {
                throw new CompilationException(CompilationErrorType.SYNTAX_ERROR,
                            e.currentToken.endLine, e);
            }
            else if (this.token!=null) {
                throw new CompilationException(CompilationErrorType.SYNTAX_ERROR,
                            this.token.endLine,  e);
            }
            throw new CompilationException(CompilationErrorType.SYNTAX_ERROR, e);
        }
        catch(TokenMgrError e) {
            if (this.token!=null) {
                throw new CompilationException(CompilationErrorType.ILLEGAL_CHARACTER,
                            this.token.endLine,  e);
            }
            throw new CompilationException(CompilationErrorType.INTERNAL_LEXER_ERROR, e);
        }
        catch(Throwable e) {
            throw new CompilationException(CompilationErrorType.INTERNAL_ERROR, e);
        }
    }

  static final private void statements(SortedMap<Integer,AbsStatementNode> code) throws ParseException, CompilationException {
  HashMap<String,ProcedureDefinition> procedures = new HashMap<String,ProcedureDefinition>();
    procedure_definitions(procedures);
    program(code);
  }

  static final private void procedure_definitions(HashMap<String,ProcedureDefinition> procedures) throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TO:
      procedure(procedures);
      procedureRecur(procedures);

      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  static final private void procedure(HashMap<String,ProcedureDefinition> procedures) throws ParseException, CompilationException {
  Token t;
  ArrayList<ThingVNode> args;
  ArrayList<AbsStatementNode> instructions;
    jj_consume_token(TO);
    t = jj_consume_token(TOKENWORD);
    args = argument_list();
    jj_consume_token(CR);
    newline();
    instructions = procedure_instructions();
    jj_consume_token(END);
    jj_consume_token(CR);
    newline();
                                                                                                                               if(procedures.keySet().contains(t.image)) {if (true) throw new CompilationException(CompilationErrorType.FUNCTION_REDEFINITION, currentLine, t.image);}
                                                                                                                    else procedures.put(t.image,new ProcedureDefinition(args,instructions));
  }

  static final private void newline() throws ParseException {
   currentLine = currentLine.intValue()+1;
  }

  static final private HashMap<String,ProcedureDefinition> procedureRecur(HashMap<String,ProcedureDefinition> procedures) throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TO:
      procedure(procedures);
      procedureRecur(procedures);
                                                        {if (true) return procedures;}
      break;
    default:
      jj_la1[1] = jj_gen;
                                                        {if (true) return procedures;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private ArrayList<ThingVNode> argument_list() throws ParseException, CompilationException {
  ArrayList<ThingVNode> args = new ArrayList<ThingVNode>();
  ArrayList<ThingVNode> value;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACCESSOP:
      jj_consume_token(ACCESSOP);
      t = jj_consume_token(TOKENWORD);
      value = argument_list();
                                           args.add(new ThingVNode(t.image,currentLine));args.addAll(value);{if (true) return args;}
      break;
    default:
      jj_la1[2] = jj_gen;
    currentLine = currentLine.intValue()+1; {if (true) return args;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private ArrayList<AbsStatementNode> procedure_instructions() throws ParseException, CompilationException {
  ArrayList<AbsStatementNode> instructions = new ArrayList<AbsStatementNode>();
    procedure_line(instructions);
    procedure_line_recur(instructions);
                                                                   {if (true) return instructions;}
    throw new Error("Missing return statement in function");
  }

  static final private void procedure_line(ArrayList<AbsStatementNode> instructions) throws ParseException, CompilationException {
  AbsStatementNode s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAKE:
    case PUSH:
    case POP:
    case QUEUE:
    case DEQUEUE:
    case WAIT:
    case PRINT:
    case IF:
    case IFELSE:
    case REPEAT:
    case FOR:
    case WHILE:
    case UNTIL:
    case FORWARD:
    case BACK:
    case RIGHT:
    case LEFT:
    case HOME:
    case SETPOS:
    case SETX:
    case SETY:
    case SETXY:
    case SETHEADING:
    case SHOWTURTLE:
    case HIDETURTLE:
    case CLEAN:
    case CLEARSCREEN:
    case LABEL:
    case CIRCLE:
    case ARC:
    case ELLIPSE:
    case PENDOWN:
    case PENUP:
    case SETPC:
    case PENERASE:
    case PENPAINT:
    case PENREVERSE:
    case SETPEN:
    case SETBACKGROUND:
      s = statement();
      procedure_statementList(instructions);
                                                       instructions.add(s);currentLine = currentLine.intValue()+1;
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  static final private void procedure_statementList(ArrayList<AbsStatementNode> instructions) throws ParseException, CompilationException {
  AbsStatementNode s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAKE:
    case PUSH:
    case POP:
    case QUEUE:
    case DEQUEUE:
    case WAIT:
    case PRINT:
    case IF:
    case IFELSE:
    case REPEAT:
    case FOR:
    case WHILE:
    case UNTIL:
    case FORWARD:
    case BACK:
    case RIGHT:
    case LEFT:
    case HOME:
    case SETPOS:
    case SETX:
    case SETY:
    case SETXY:
    case SETHEADING:
    case SHOWTURTLE:
    case HIDETURTLE:
    case CLEAN:
    case CLEARSCREEN:
    case LABEL:
    case CIRCLE:
    case ARC:
    case ELLIPSE:
    case PENDOWN:
    case PENUP:
    case SETPC:
    case PENERASE:
    case PENPAINT:
    case PENREVERSE:
    case SETPEN:
    case SETBACKGROUND:
      s = statement();
      procedure_statementList(instructions);
                                                       instructions.add(s);

      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  static final private void procedure_line_recur(ArrayList<AbsStatementNode> instructions) throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CR:
      jj_consume_token(CR);
      procedure_line(instructions);
      procedure_line_recur(instructions);

      break;
    default:
      jj_la1[5] = jj_gen;

    }
  }

  static final private void program(SortedMap<Integer,AbsStatementNode> code) throws ParseException, CompilationException {
    line(code);
    statementsRecurs(code);

  }

  static final private void statementsRecurs(SortedMap<Integer,AbsStatementNode> code) throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CR:
      jj_consume_token(CR);
      line(code);
      statementsRecurs(code);

      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

  static final private void line(Map<Integer,AbsStatementNode> code) throws ParseException, CompilationException {
    AbsStatementNode s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAKE:
    case PUSH:
    case POP:
    case QUEUE:
    case DEQUEUE:
    case WAIT:
    case PRINT:
    case IF:
    case IFELSE:
    case REPEAT:
    case FOR:
    case WHILE:
    case UNTIL:
    case FORWARD:
    case BACK:
    case RIGHT:
    case LEFT:
    case HOME:
    case SETPOS:
    case SETX:
    case SETY:
    case SETXY:
    case SETHEADING:
    case SHOWTURTLE:
    case HIDETURTLE:
    case CLEAN:
    case CLEARSCREEN:
    case LABEL:
    case CIRCLE:
    case ARC:
    case ELLIPSE:
    case PENDOWN:
    case PENUP:
    case SETPC:
    case PENERASE:
    case PENPAINT:
    case PENREVERSE:
    case SETPEN:
    case SETBACKGROUND:
      s = statement();
      statementList(code);
                                       code.put(currentLine,s);
                                        currentLine = currentLine.intValue()+1;
      break;
    default:
      jj_la1[7] = jj_gen;

    }
  }

  static final private void statementList(Map<Integer,AbsStatementNode> code) throws ParseException, CompilationException {
    AbsStatementNode s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAKE:
    case PUSH:
    case POP:
    case QUEUE:
    case DEQUEUE:
    case WAIT:
    case PRINT:
    case IF:
    case IFELSE:
    case REPEAT:
    case FOR:
    case WHILE:
    case UNTIL:
    case FORWARD:
    case BACK:
    case RIGHT:
    case LEFT:
    case HOME:
    case SETPOS:
    case SETX:
    case SETY:
    case SETXY:
    case SETHEADING:
    case SHOWTURTLE:
    case HIDETURTLE:
    case CLEAN:
    case CLEARSCREEN:
    case LABEL:
    case CIRCLE:
    case ARC:
    case ELLIPSE:
    case PENDOWN:
    case PENUP:
    case SETPC:
    case PENERASE:
    case PENPAINT:
    case PENREVERSE:
    case SETPEN:
    case SETBACKGROUND:
      s = statement();
      statementList(code);
                                         code.put(currentLine,s);
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  static final private AbsStatementNode statement() throws ParseException, CompilationException {
        Token t,t1,t2;
        ArrayList<AbsStatementNode> val1, val2;
        ArrayList<AbsValueNode > val3;
        AbsValueNode e1, e2, e3;
        AbsStatementNode s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAKE:
      jj_consume_token(MAKE);
      jj_consume_token(NONEVALUATE);
      t = jj_consume_token(TOKENWORD);
      e1 = expression();
                                                                symbolTable.declare(t.image,currentLine);
                                                                                                                 {if (true) return new MakeSNode(new VariableName(t.image),e1,currentLine);}
      break;
    case PRINT:
      t = jj_consume_token(PRINT);
      e1 = expression();
                                       {if (true) return new PrintSNode(e1,currentLine);}
      break;
    case IF:
      t = jj_consume_token(IF);
      e1 = expression();
      jj_consume_token(OPENBRACKET);
      val1 = listInstructions();
      jj_consume_token(CLOSEBRACKET);
      val2 = ifParamSup();
                                                         if(val2==null) {if (true) return new IfSNode(e1,new ThenSNode(val1,currentLine),currentLine);}
                            else {if (true) return new IfElseSNode(e1,new ThenSNode(val1,currentLine),new ElseSNode(val2,currentLine),currentLine);}
      break;
    case IFELSE:
      jj_consume_token(IFELSE);
      e1 = expression();
      jj_consume_token(OPENBRACKET);
      val1 = listInstructions();
      jj_consume_token(CLOSEBRACKET);
      jj_consume_token(OPENBRACKET);
      val2 = listInstructions();
      jj_consume_token(CLOSEBRACKET);
                                                         {if (true) return new IfElseSNode(e1,new ThenSNode(val1,currentLine),new ElseSNode(val2,currentLine),currentLine);}
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
      e1 = expression();
      jj_consume_token(OPENBRACKET);
      val1 = listInstructions();
      jj_consume_token(CLOSEBRACKET);
                                                                                               {if (true) return new RepeatSNode(e1,val1,currentLine);}
      break;
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(OPENBRACKET);
      t = jj_consume_token(TOKENWORD);
      e1 = expression();
      e2 = expression();
      e3 = forParamSup();
      jj_consume_token(CLOSEBRACKET);
      jj_consume_token(OPENBRACKET);
      val1 = listInstructions();
      jj_consume_token(CLOSEBRACKET);
                                                         {if (true) return new ForSNode(t.image,e1,e2,e3,val1,currentLine);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      e1 = expression();
      jj_consume_token(OPENBRACKET);
      val1 = listInstructions();
      jj_consume_token(CLOSEBRACKET);
                                                                                              {if (true) return new WhileSNode(e1,val1,currentLine);}
      break;
    case UNTIL:
      jj_consume_token(UNTIL);
      e1 = expression();
      jj_consume_token(OPENBRACKET);
      val1 = listInstructions();
      jj_consume_token(CLOSEBRACKET);
                                                                                              {if (true) return new UntilSNode(e1,val1,currentLine);}
      break;
    case FORWARD:
      jj_consume_token(FORWARD);
      e1 = expression();
                                   {if (true) return new ForwardSNode(e1,currentLine);}
      break;
    case BACK:
      jj_consume_token(BACK);
      e1 = expression();
                                {if (true) return new BackSNode(e1,currentLine);}
      break;
    case RIGHT:
      jj_consume_token(RIGHT);
      e1 = expression();
                                 {if (true) return new RightSNode(e1,currentLine);}
      break;
    case LEFT:
      jj_consume_token(LEFT);
      e1 = expression();
                                {if (true) return new LeftSNode(e1,currentLine);}
      break;
    case HOME:
      jj_consume_token(HOME);
                {if (true) return new HomeSNode(currentLine);}
      break;
    case SETPOS:
      jj_consume_token(SETPOS);
      e1 = expression();
      e2 = expression();
                                                  {if (true) return new SetPosSNode(e1, e2, currentLine);}
      break;
    case SETXY:
      jj_consume_token(SETXY);
      e1 = expression();
      e2 = expression();
                                                 {if (true) return new SetPosSNode(e1,e2,currentLine);}
      break;
    case SETX:
      jj_consume_token(SETX);
      e1 = expression();
                                {if (true) return new SetXSNode(e1,currentLine);}
      break;
    case SETY:
      jj_consume_token(SETY);
      e1 = expression();
                                {if (true) return new SetYSNode(e1,currentLine);}
      break;
    case SETHEADING:
      jj_consume_token(SETHEADING);
      e1 = expression();
                                      {if (true) return new HeadingSNode(e1,currentLine);}
      break;
    case PUSH:
      jj_consume_token(PUSH);
      e1 = expression();
      e2 = expression();
                                                {if (true) return new PushSNode(e1,e2,currentLine);}
      break;
    case POP:
      jj_consume_token(POP);
      e1 = expression();
                               {if (true) return new PopSNode(e1,currentLine);}
      break;
    case QUEUE:
      jj_consume_token(QUEUE);
      e1 = expression();
      e2 = expression();
                                                 {if (true) return new QueueSNode(e1,e2,currentLine);}
      break;
    case DEQUEUE:
      jj_consume_token(DEQUEUE);
      e1 = expression();
                                   {if (true) return new DeQueueSNode(e1,currentLine);}
      break;
    case WAIT:
      jj_consume_token(WAIT);
      e1 = expression();
                                {if (true) return new WaitSNode(e1,currentLine);}
      break;
    case SHOWTURTLE:
      jj_consume_token(SHOWTURTLE);
                       {if (true) return new ShowTurtleSNode(currentLine);}
      break;
    case HIDETURTLE:
      jj_consume_token(HIDETURTLE);
                       {if (true) return new HideTurtleSNode(currentLine);}
      break;
    case CLEAN:
      jj_consume_token(CLEAN);
                  {if (true) return new CleanSNode(currentLine);}
      break;
    case CLEARSCREEN:
      jj_consume_token(CLEARSCREEN);
                        {if (true) return new ClearScreenSNode(currentLine);}
      break;
    case LABEL:
      jj_consume_token(LABEL);
      e1 = expression();
                                 {if (true) return new LabelSNode(e1,currentLine);}
      break;
    case CIRCLE:
      jj_consume_token(CIRCLE);
      e1 = expression();
                                  {if (true) return new CircleSNode(e1,currentLine);}
      break;
    case ARC:
      jj_consume_token(ARC);
      e1 = expression();
      e2 = expression();
                                               {if (true) return new ArcSNode(e1,e2,currentLine);}
      break;
    case ELLIPSE:
      jj_consume_token(ELLIPSE);
      e1 = expression();
      e2 = expression();
                                                   {if (true) return new EllipseSNode(e1,e2,currentLine);}
      break;
    case PENDOWN:
      jj_consume_token(PENDOWN);
                    {if (true) return new PenDownSNode(currentLine);}
      break;
    case PENUP:
      jj_consume_token(PENUP);
                  {if (true) return new PenUpSNode(currentLine);}
      break;
    case SETPC:
      jj_consume_token(SETPC);
      e1 = expression();
                                 {if (true) return new SetPenColorSNode(e1,currentLine);}
      break;
    case PENERASE:
      jj_consume_token(PENERASE);
                     {if (true) return new PenEraseSNode(currentLine);}
      break;
    case PENPAINT:
      jj_consume_token(PENPAINT);
                     {if (true) return new PenPaintSNode(currentLine);}
      break;
    case PENREVERSE:
      jj_consume_token(PENREVERSE);
                       {if (true) return new PenReverseSNode(currentLine);}
      break;
    case SETPEN:
      jj_consume_token(SETPEN);
      e1 = expression();
                                  {if (true) return new SetPenSNode(e1,currentLine);}
      break;
    case SETBACKGROUND:
      jj_consume_token(SETBACKGROUND);
      e1 = expression();
                                         {if (true) return new SetBackgroundSNode(e1,currentLine);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode expression() throws ParseException, CompilationException {
    Token t;
    AbsValueNode v1, v2, v3;
    ArrayList<AbsValueNode> value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENBRACKET:
      jj_consume_token(OPENBRACKET);
      value = listComplex();
      jj_consume_token(CLOSEBRACKET);
                                                          {if (true) return new ListDataVNode(value,currentLine);}
      break;
    case NONEVALUATE:
      jj_consume_token(NONEVALUATE);
      t = jj_consume_token(TOKENWORD);
                                       {if (true) return new WordDataVNode(t.image,currentLine);}
      break;
    case ACCESSOP:
      jj_consume_token(ACCESSOP);
      t = jj_consume_token(TOKENWORD);
                                    {if (true) return new ThingVNode(t.image,currentLine);}
      break;
    case THING:
      jj_consume_token(THING);
      t = thingParam();
                                {if (true) return new ThingVNode(t.image,currentLine);}
      break;
    case WORD:
      jj_consume_token(WORD);
      value = listArg();
                                {if (true) return new WordVNode(value,currentLine);}
      break;
    case LIST:
      jj_consume_token(LIST);
      value = listComplex();
                                    {if (true) return new ListVNode(value,currentLine);}
      break;
    case SENTENCE:
      jj_consume_token(SENTENCE);
      value = listComplex();
                                        {if (true) return new SentenceVNode(value,currentLine);}
      break;
    case FPUT:
      jj_consume_token(FPUT);
      v1 = expression();
      v2 = expression();
                                                {if (true) return new FputVNode(v1,v2,currentLine);}
      break;
    case LPUT:
      jj_consume_token(LPUT);
      v1 = expression();
      v2 = expression();
                                                {if (true) return new LputVNode(v1,v2,currentLine);}
      break;
    case REVERSE:
      jj_consume_token(REVERSE);
      v1 = expression();
                                  {if (true) return new ReverseVNode(v1,currentLine);}
      break;
    case FIRST:
      jj_consume_token(FIRST);
      v1 = expression();
                                 {if (true) return new FirstVNode(v1,currentLine);}
      break;
    case LAST:
      jj_consume_token(LAST);
      v1 = expression();
                                {if (true) return new LastVNode(v1,currentLine);}
      break;
    case BUTFIRST:
      jj_consume_token(BUTFIRST);
      v1 = expression();
                                    {if (true) return new ButFirstVNode(v1,currentLine);}
      break;
    case BUTLAST:
      jj_consume_token(BUTLAST);
      v1 = expression();
                                   {if (true) return new ButLastVNode(v1,currentLine);}
      break;
    case ITEM:
      jj_consume_token(ITEM);
      v1 = expression();
      v2 = expression();
                                                {if (true) return new ItemVNode(v1,v2,currentLine);}
      break;
    case PICK:
      jj_consume_token(PICK);
      v1 = expression();
                                {if (true) return new PickVNode(v1,currentLine);}
      break;
    case REMOVE:
      jj_consume_token(REMOVE);
      v1 = expression();
      v2 = expression();
                                                  {if (true) return new RemoveVNode(v1,v2,currentLine);}
      break;
    case SUM:
    case DIFF:
    case PROD:
    case DIV:
    case AND:
    case OR:
    case LESS:
    case LESSEQUAL:
    case GREATER:
    case GREATEREQUAL:
    case EQUAL:
    case NOTEQUAL:
    case OPENPARENTH:
    case 98:
      v1 = prefixed_operation_expression();
                                          {if (true) return v1;}
      break;
    case NUMBER:
    case TOKENWORD:
      v1 = possible_infixed_expression();
                                        {if (true) return v1;}
      break;
    case MOD:
      jj_consume_token(MOD);
      v1 = expression();
      v2 = expression();
                                               {if (true) return new ModVNode(v1,v2,currentLine);}
      break;
    case ROUND:
      jj_consume_token(ROUND);
      v1 = expression();
                                 {if (true) return new RoundVNode(v1,currentLine);}
      break;
    case SQRT:
      jj_consume_token(SQRT);
      v1 = expression();
                                {if (true) return new SqrtVNode(v1,currentLine);}
      break;
    case POWER:
      jj_consume_token(POWER);
      v1 = expression();
      v2 = expression();
                                                 {if (true) return new PowerVNode(v1,v2,currentLine);}
      break;
    case SIN:
      jj_consume_token(SIN);
      v1 = expression();
                               {if (true) return new SinVNode(v1,currentLine);}
      break;
    case ISEQ:
      jj_consume_token(ISEQ);
      v1 = expression();
      v2 = expression();
                                                {if (true) return new IseqVNode(v1,v2,currentLine);}
      break;
    case RSEQ:
      jj_consume_token(RSEQ);
      v1 = expression();
      v2 = expression();
      v3 = expression();
                                                                {if (true) return new RseqVNode(v1,v2,v3,currentLine);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      v1 = expression();
                                 {if (true) return new MinusVNode(v1,currentLine);}
      break;
    case NOT:
      jj_consume_token(NOT);
      v1 = expression();
                               {if (true) return new NotVNode(v1,currentLine);}
      break;
    case PENCOLOR:
      jj_consume_token(PENCOLOR);
                    {if (true) return new PenColorVNode(currentLine);}
      break;
    case PEN:
      jj_consume_token(PEN);
               {if (true) return new PenVNode(currentLine);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private ArrayList<AbsStatementNode> ifParamSup() throws ParseException, CompilationException {
        ArrayList<AbsStatementNode> val2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENBRACKET:
      jj_consume_token(OPENBRACKET);
      val2 = listInstructions();
      jj_consume_token(CLOSEBRACKET);
                                                                    {if (true) return val2;}
      break;
    default:
      jj_la1[11] = jj_gen;
           {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode forParamSup() throws ParseException, CompilationException {
         AbsValueNode e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case WORD:
    case LIST:
    case SENTENCE:
    case FPUT:
    case LPUT:
    case REVERSE:
    case THING:
    case FIRST:
    case LAST:
    case BUTFIRST:
    case BUTLAST:
    case ITEM:
    case PICK:
    case REMOVE:
    case SUM:
    case DIFF:
    case MINUS:
    case PROD:
    case DIV:
    case MOD:
    case ROUND:
    case SQRT:
    case POWER:
    case SIN:
    case ISEQ:
    case RSEQ:
    case AND:
    case OR:
    case NOT:
    case LESS:
    case LESSEQUAL:
    case GREATER:
    case GREATEREQUAL:
    case EQUAL:
    case NOTEQUAL:
    case PENCOLOR:
    case PEN:
    case TOKENWORD:
    case NONEVALUATE:
    case ACCESSOP:
    case OPENBRACKET:
    case OPENPARENTH:
    case 98:
      e = expression();
                          {if (true) return e;}
      break;
    default:
      jj_la1[12] = jj_gen;
           {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private ArrayList<AbsStatementNode> listInstructions() throws ParseException, CompilationException {
        AbsStatementNode s;
        ArrayList<AbsStatementNode> value = new ArrayList<AbsStatementNode>();
        ArrayList<AbsStatementNode> result = new ArrayList<AbsStatementNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAKE:
    case PUSH:
    case POP:
    case QUEUE:
    case DEQUEUE:
    case WAIT:
    case PRINT:
    case IF:
    case IFELSE:
    case REPEAT:
    case FOR:
    case WHILE:
    case UNTIL:
    case FORWARD:
    case BACK:
    case RIGHT:
    case LEFT:
    case HOME:
    case SETPOS:
    case SETX:
    case SETY:
    case SETXY:
    case SETHEADING:
    case SHOWTURTLE:
    case HIDETURTLE:
    case CLEAN:
    case CLEARSCREEN:
    case LABEL:
    case CIRCLE:
    case ARC:
    case ELLIPSE:
    case PENDOWN:
    case PENUP:
    case SETPC:
    case PENERASE:
    case PENPAINT:
    case PENREVERSE:
    case SETPEN:
    case SETBACKGROUND:
      s = statement();
      value = listInstructions();
                                                  result.add(s);result.addAll(value);{if (true) return result;}
      break;
    default:
      jj_la1[13] = jj_gen;
           {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode possible_infixed_expression() throws ParseException, CompilationException {
  Token t;
  AbsValueNode v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
      v = infixed_expression(new NumberVNode(t.image,currentLine));
                                                                           {if (true) return v;}
      break;
    case TOKENWORD:
      t = jj_consume_token(TOKENWORD);
      v = infixed_expression(new ThingVNode(t.image,currentLine));
                                                                            {if (true) return v;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode infixed_expression(AbsValueNode v1) throws ParseException, CompilationException {
  AbsValueNode v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 97:
      jj_consume_token(97);
      v2 = expression();
                            {if (true) return new SumVNode(v1,v2,currentLine);}
      break;
    case 98:
      jj_consume_token(98);
      v2 = expression();
                            {if (true) return new DiffVNode(v1,v2,currentLine);}
      break;
    case 99:
      jj_consume_token(99);
      v2 = expression();
                            {if (true) return new ProdVNode(v1,v2,currentLine);}
      break;
    case 100:
      jj_consume_token(100);
      v2 = expression();
                            {if (true) return new DivVNode(v1,v2,currentLine);}
      break;
    case 101:
      jj_consume_token(101);
      v2 = expression();
                            {if (true) return new LessVNode(v1,v2,currentLine);}
      break;
    case 102:
      jj_consume_token(102);
      v2 = expression();
                             {if (true) return new LessEqualVNode(v1,v2,currentLine);}
      break;
    case 103:
      jj_consume_token(103);
      v2 = expression();
                            {if (true) return new GreaterVNode(v1,v2,currentLine);}
      break;
    case 104:
      jj_consume_token(104);
      v2 = expression();
                             {if (true) return new GreaterEqualVNode(v1,v2,currentLine);}
      break;
    case 105:
      jj_consume_token(105);
      v2 = expression();
                            {if (true) return new EqualVNode(v1,v2,currentLine);}
      break;
    case 106:
      jj_consume_token(106);
      v2 = expression();
                             {if (true) return new NotEqualVNode(v1,v2,currentLine);}
      break;
    default:
      jj_la1[15] = jj_gen;
        {if (true) return v1;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private Token thingParam() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOKENWORD:
      t = jj_consume_token(TOKENWORD);
                     {if (true) return t;}
      break;
    case ACCESSOP:
      jj_consume_token(ACCESSOP);
      t = jj_consume_token(TOKENWORD);
                                    {if (true) return t;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private ArrayList<AbsValueNode> listArg() throws ParseException, CompilationException {
    Token t;
    ArrayList<AbsValueNode> result = new ArrayList<AbsValueNode>();
    ArrayList<AbsValueNode> value = new ArrayList<AbsValueNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
      value = listArgRecurs();
                                          result.add(new NumberVNode(t.image,currentLine));
                                          result.addAll(value);
                                          {if (true) return result;}
      break;
    case TOKENWORD:
      t = jj_consume_token(TOKENWORD);
      value = listArgRecurs();
                                             result.add(new WordDataVNode(t.image,currentLine));
                                             result.addAll(value);
                                             {if (true) return result;}
      break;
    case NONEVALUATE:
      jj_consume_token(NONEVALUATE);
      t = jj_consume_token(TOKENWORD);
      value = listArgRecurs();
                                                                 result.add(new WordDataVNode(t.image,currentLine));
                                                                                result.addAll(value);
                                                                                {if (true) return result;}
      break;
    case ACCESSOP:
      jj_consume_token(ACCESSOP);
      t = jj_consume_token(TOKENWORD);
      value = listArgRecurs();
                                                          result.add(new ThingVNode(t.image,currentLine));
                                                                                result.addAll(value);
                                                                                {if (true) return result;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private ArrayList<AbsValueNode> listArgRecurs() throws ParseException, CompilationException {
    Token t;
    ArrayList<AbsValueNode> result = new ArrayList<AbsValueNode>();
    ArrayList<AbsValueNode> value = new ArrayList<AbsValueNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
      value = listArgRecurs();
                                        result.add(new NumberVNode(t.image,currentLine));
                                        result.addAll(value);
                                        {if (true) return result;}
      break;
    case TOKENWORD:
      t = jj_consume_token(TOKENWORD);
      value = listArgRecurs();
                                             result.add(new WordDataVNode(t.image,currentLine));
                                             result.addAll(value);
                                             {if (true) return result;}
      break;
    case NONEVALUATE:
      jj_consume_token(NONEVALUATE);
      t = jj_consume_token(TOKENWORD);
      value = listArgRecurs();
                                                                 result.add(new WordDataVNode(t.image,currentLine));
                                                                                result.addAll(value);
                                                                                {if (true) return result;}
      break;
    case ACCESSOP:
      jj_consume_token(ACCESSOP);
      t = jj_consume_token(TOKENWORD);
      value = listArgRecurs();
                                                          result.add(new ThingVNode(t.image,currentLine));
                                                                                result.addAll(value);
                                                                                {if (true) return result;}
      break;
    default:
      jj_la1[18] = jj_gen;
       {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private ArrayList<AbsValueNode> listComplex() throws ParseException, CompilationException {
    Token t;
    ArrayList<AbsValueNode> result = new ArrayList<AbsValueNode>();
    ArrayList<AbsValueNode> value = new ArrayList<AbsValueNode>();
    ArrayList<AbsValueNode> value2 = new ArrayList<AbsValueNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
      value = listComplexRecurs();
                                            result.add(new NumberVNode(t.image,currentLine));
                                            result.addAll(value);
                                            {if (true) return result;}
      break;
    case TOKENWORD:
      t = jj_consume_token(TOKENWORD);
      value = listComplexRecurs();
                                                 result.add(new WordDataVNode(t.image,currentLine));
                                                 result.addAll(value);
                                                 {if (true) return result;}
      break;
    case NONEVALUATE:
      jj_consume_token(NONEVALUATE);
      t = jj_consume_token(TOKENWORD);
      value = listArgRecurs();
                                                                 result.add(new WordDataVNode(t.image,currentLine));
                                                                                result.addAll(value);
                                                                                {if (true) return result;}
      break;
    case OPENBRACKET:
      jj_consume_token(OPENBRACKET);
      value2 = listComplex();
      jj_consume_token(CLOSEBRACKET);
      value = listComplexRecurs();
                                                                                       result.add(new ListDataVNode(value2,currentLine));
                                                            result.addAll(value);
                                                            {if (true) return result;}
      break;
    case ACCESSOP:
      jj_consume_token(ACCESSOP);
      t = jj_consume_token(TOKENWORD);
      value = listComplexRecurs();
                                                              result.add(new ThingVNode(t.image,currentLine));
                                                        result.addAll(value);
                                                        {if (true) return result;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private ArrayList<AbsValueNode> listComplexRecurs() throws ParseException, CompilationException {
    Token t;
    ArrayList<AbsValueNode> result = new ArrayList<AbsValueNode>();
    ArrayList<AbsValueNode> value = new ArrayList<AbsValueNode>();
    ArrayList<AbsValueNode> value2 = new ArrayList<AbsValueNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
      value = listComplexRecurs();
                                           result.add(new NumberVNode(t.image,currentLine));
                                                                                result.addAll(value);
                                            {if (true) return result;}
      break;
    case TOKENWORD:
      t = jj_consume_token(TOKENWORD);
      value = listComplexRecurs();
                                                 result.add(new WordDataVNode(t.image,currentLine));
                                                result.addAll(value);
                                                {if (true) return result;}
      break;
    case NONEVALUATE:
      jj_consume_token(NONEVALUATE);
      t = jj_consume_token(TOKENWORD);
      value = listArgRecurs();
                                                                 result.add(new WordDataVNode(t.image,currentLine));
                                                                                result.addAll(value);
                                                                                {if (true) return result;}
      break;
    case OPENBRACKET:
      jj_consume_token(OPENBRACKET);
      value2 = listComplex();
      jj_consume_token(CLOSEBRACKET);
      value = listComplexRecurs();
                                                                                       result.add(new ListDataVNode(value2,currentLine));
                                                            result.addAll(value);
                                                            {if (true) return result;}
      break;
    case ACCESSOP:
      jj_consume_token(ACCESSOP);
      t = jj_consume_token(TOKENWORD);
      value = listComplexRecurs();
                                                              result.add(new ThingVNode(t.image,currentLine));
                                                        result.addAll(value);
                                                        {if (true) return result;}
      break;
    default:
      jj_la1[20] = jj_gen;
       {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode prefixed_operation_expression() throws ParseException, CompilationException {
    AbsValueNode v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUM:
    case DIFF:
    case PROD:
    case DIV:
    case AND:
    case OR:
    case LESS:
    case LESSEQUAL:
    case GREATER:
    case GREATEREQUAL:
    case EQUAL:
    case NOTEQUAL:
      v = simple_operation_expression();
                                     {if (true) return v;}
      break;
    case 98:
      jj_consume_token(98);
      v = expression();
                          {if (true) return new MinusVNode(v,currentLine);}
      break;
    case OPENPARENTH:
      jj_consume_token(OPENPARENTH);
      v = recur_operation_expression();
      jj_consume_token(CLOSEPARENTH);
                                              {if (true) return v;}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode simple_operation_expression() throws ParseException, CompilationException {
    AbsValueNode v1,v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUM:
      jj_consume_token(SUM);
      v1 = expression();
      v2 = expression();
                                               {if (true) return new SumVNode(v1, v2,currentLine);}
      break;
    case DIFF:
      jj_consume_token(DIFF);
      v1 = expression();
      v2 = expression();
                                                {if (true) return new DiffVNode(v1, v2,currentLine);}
      break;
    case PROD:
      jj_consume_token(PROD);
      v1 = expression();
      v2 = expression();
                                                {if (true) return new ProdVNode(v1, v2,currentLine);}
      break;
    case DIV:
      jj_consume_token(DIV);
      v1 = expression();
      v2 = expression();
                                               {if (true) return new DivVNode(v1, v2,currentLine);}
      break;
    case AND:
      jj_consume_token(AND);
      v1 = expression();
      v2 = expression();
                                               {if (true) return new AndVNode(v1, v2,currentLine);}
      break;
    case OR:
      jj_consume_token(OR);
      v1 = expression();
      v2 = expression();
                                              {if (true) return new OrVNode(v1, v2,currentLine);}
      break;
    case LESS:
      jj_consume_token(LESS);
      v1 = expression();
      v2 = expression();
                                                {if (true) return new LessVNode(v1, v2,currentLine);}
      break;
    case LESSEQUAL:
      jj_consume_token(LESSEQUAL);
      v1 = expression();
      v2 = expression();
                                                     {if (true) return new LessEqualVNode(v1, v2,currentLine);}
      break;
    case GREATER:
      jj_consume_token(GREATER);
      v1 = expression();
      v2 = expression();
                                                   {if (true) return new GreaterVNode(v1, v2,currentLine);}
      break;
    case GREATEREQUAL:
      jj_consume_token(GREATEREQUAL);
      v1 = expression();
      v2 = expression();
                                                        {if (true) return new GreaterEqualVNode(v1, v2,currentLine);}
      break;
    case EQUAL:
      jj_consume_token(EQUAL);
      v1 = expression();
      v2 = expression();
                                                 {if (true) return new EqualVNode(v1, v2,currentLine);}
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
      v1 = expression();
      v2 = expression();
                                                    {if (true) return new NotEqualVNode(v1, v2,currentLine);}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode recur_operation_expression() throws ParseException, CompilationException {
    AbsValueNode v1,v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUM:
      jj_consume_token(SUM);
      v1 = expression();
      v2 = sumRecur();
                                             {if (true) return new SumVNode(v1, v2,currentLine);}
      break;
    case DIFF:
      jj_consume_token(DIFF);
      v1 = expression();
      v2 = diffRecur();
                                               {if (true) return new DiffVNode(v1, v2,currentLine);}
      break;
    case PROD:
      jj_consume_token(PROD);
      v1 = expression();
      v2 = prodRecur();
                                               {if (true) return new ProdVNode(v1, v2,currentLine);}
      break;
    case DIV:
      jj_consume_token(DIV);
      v1 = expression();
      v2 = divRecur();
                                             {if (true) return new DivVNode(v1, v2,currentLine);}
      break;
    case AND:
      jj_consume_token(AND);
      v1 = expression();
      v2 = expression();
                                               {if (true) return new AndVNode(v1, v2,currentLine);}
      break;
    case OR:
      jj_consume_token(OR);
      v1 = expression();
      v2 = expression();
                                              {if (true) return new OrVNode(v1, v2,currentLine);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode sumRecur() throws ParseException, CompilationException {
    AbsValueNode v1, v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case WORD:
    case LIST:
    case SENTENCE:
    case FPUT:
    case LPUT:
    case REVERSE:
    case THING:
    case FIRST:
    case LAST:
    case BUTFIRST:
    case BUTLAST:
    case ITEM:
    case PICK:
    case REMOVE:
    case SUM:
    case DIFF:
    case MINUS:
    case PROD:
    case DIV:
    case MOD:
    case ROUND:
    case SQRT:
    case POWER:
    case SIN:
    case ISEQ:
    case RSEQ:
    case AND:
    case OR:
    case NOT:
    case LESS:
    case LESSEQUAL:
    case GREATER:
    case GREATEREQUAL:
    case EQUAL:
    case NOTEQUAL:
    case PENCOLOR:
    case PEN:
    case TOKENWORD:
    case NONEVALUATE:
    case ACCESSOP:
    case OPENBRACKET:
    case OPENPARENTH:
    case 98:
      v1 = expression();
      v2 = sumRecur();
                                   if(v2==null){{if (true) return v1;}} else{{if (true) return new SumVNode(v1, v2,currentLine);}}
      break;
    default:
      jj_la1[24] = jj_gen;
       {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode diffRecur() throws ParseException, CompilationException {
    AbsValueNode v1, v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case WORD:
    case LIST:
    case SENTENCE:
    case FPUT:
    case LPUT:
    case REVERSE:
    case THING:
    case FIRST:
    case LAST:
    case BUTFIRST:
    case BUTLAST:
    case ITEM:
    case PICK:
    case REMOVE:
    case SUM:
    case DIFF:
    case MINUS:
    case PROD:
    case DIV:
    case MOD:
    case ROUND:
    case SQRT:
    case POWER:
    case SIN:
    case ISEQ:
    case RSEQ:
    case AND:
    case OR:
    case NOT:
    case LESS:
    case LESSEQUAL:
    case GREATER:
    case GREATEREQUAL:
    case EQUAL:
    case NOTEQUAL:
    case PENCOLOR:
    case PEN:
    case TOKENWORD:
    case NONEVALUATE:
    case ACCESSOP:
    case OPENBRACKET:
    case OPENPARENTH:
    case 98:
      v1 = expression();
      v2 = diffRecur();
                                    if(v2==null){{if (true) return v1;}} else{{if (true) return new DiffVNode(v1, v2,currentLine);}}
      break;
    default:
      jj_la1[25] = jj_gen;
       {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode prodRecur() throws ParseException, CompilationException {
    AbsValueNode v1, v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case WORD:
    case LIST:
    case SENTENCE:
    case FPUT:
    case LPUT:
    case REVERSE:
    case THING:
    case FIRST:
    case LAST:
    case BUTFIRST:
    case BUTLAST:
    case ITEM:
    case PICK:
    case REMOVE:
    case SUM:
    case DIFF:
    case MINUS:
    case PROD:
    case DIV:
    case MOD:
    case ROUND:
    case SQRT:
    case POWER:
    case SIN:
    case ISEQ:
    case RSEQ:
    case AND:
    case OR:
    case NOT:
    case LESS:
    case LESSEQUAL:
    case GREATER:
    case GREATEREQUAL:
    case EQUAL:
    case NOTEQUAL:
    case PENCOLOR:
    case PEN:
    case TOKENWORD:
    case NONEVALUATE:
    case ACCESSOP:
    case OPENBRACKET:
    case OPENPARENTH:
    case 98:
      v1 = expression();
      v2 = prodRecur();
                                    if(v2==null){{if (true) return v1;}} else{{if (true) return new ProdVNode(v1, v2,currentLine);}}
      break;
    default:
      jj_la1[26] = jj_gen;
       {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode divRecur() throws ParseException, CompilationException {
    AbsValueNode v1, v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case WORD:
    case LIST:
    case SENTENCE:
    case FPUT:
    case LPUT:
    case REVERSE:
    case THING:
    case FIRST:
    case LAST:
    case BUTFIRST:
    case BUTLAST:
    case ITEM:
    case PICK:
    case REMOVE:
    case SUM:
    case DIFF:
    case MINUS:
    case PROD:
    case DIV:
    case MOD:
    case ROUND:
    case SQRT:
    case POWER:
    case SIN:
    case ISEQ:
    case RSEQ:
    case AND:
    case OR:
    case NOT:
    case LESS:
    case LESSEQUAL:
    case GREATER:
    case GREATEREQUAL:
    case EQUAL:
    case NOTEQUAL:
    case PENCOLOR:
    case PEN:
    case TOKENWORD:
    case NONEVALUATE:
    case ACCESSOP:
    case OPENBRACKET:
    case OPENPARENTH:
    case 98:
      v1 = expression();
      v2 = divRecur();
                                   if(v2==null){{if (true) return v1;}} else{{if (true) return new DivVNode(v1, v2,currentLine);}}
      break;
    default:
      jj_la1[27] = jj_gen;
       {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode orRecur() throws ParseException, CompilationException {
    AbsValueNode v1, v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case WORD:
    case LIST:
    case SENTENCE:
    case FPUT:
    case LPUT:
    case REVERSE:
    case THING:
    case FIRST:
    case LAST:
    case BUTFIRST:
    case BUTLAST:
    case ITEM:
    case PICK:
    case REMOVE:
    case SUM:
    case DIFF:
    case MINUS:
    case PROD:
    case DIV:
    case MOD:
    case ROUND:
    case SQRT:
    case POWER:
    case SIN:
    case ISEQ:
    case RSEQ:
    case AND:
    case OR:
    case NOT:
    case LESS:
    case LESSEQUAL:
    case GREATER:
    case GREATEREQUAL:
    case EQUAL:
    case NOTEQUAL:
    case PENCOLOR:
    case PEN:
    case TOKENWORD:
    case NONEVALUATE:
    case ACCESSOP:
    case OPENBRACKET:
    case OPENPARENTH:
    case 98:
      v1 = expression();
      v2 = divRecur();
                                   if(v2==null){{if (true) return v1;}} else{{if (true) return new OrVNode(v1, v2,currentLine);}}
      break;
    default:
      jj_la1[28] = jj_gen;
       {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final private AbsValueNode andRecur() throws ParseException, CompilationException {
    AbsValueNode v1, v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case WORD:
    case LIST:
    case SENTENCE:
    case FPUT:
    case LPUT:
    case REVERSE:
    case THING:
    case FIRST:
    case LAST:
    case BUTFIRST:
    case BUTLAST:
    case ITEM:
    case PICK:
    case REMOVE:
    case SUM:
    case DIFF:
    case MINUS:
    case PROD:
    case DIV:
    case MOD:
    case ROUND:
    case SQRT:
    case POWER:
    case SIN:
    case ISEQ:
    case RSEQ:
    case AND:
    case OR:
    case NOT:
    case LESS:
    case LESSEQUAL:
    case GREATER:
    case GREATEREQUAL:
    case EQUAL:
    case NOTEQUAL:
    case PENCOLOR:
    case PEN:
    case TOKENWORD:
    case NONEVALUATE:
    case ACCESSOP:
    case OPENBRACKET:
    case OPENPARENTH:
    case 98:
      v1 = expression();
      v2 = divRecur();
                                   if(v2==null){{if (true) return v1;}} else{{if (true) return new AndVNode(v1, v2,currentLine);}}
      break;
    default:
      jj_la1[29] = jj_gen;
       {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LogoParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x403c0200,0x403c0200,0x20,0x20,0x403c0200,0x403c0200,0x403c0200,0xbfc3f040,0x0,0xbfc3f040,0x403c0200,0x40,0x0,0x0,0x40,0x40,0x40,0x40,0x80000000,0x80000000,0x80000000,0xbfc3f040,0xbfc3f040,0xbfc3f040,0xbfc3f040,0xbfc3f040,0xbfc3f040,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000000,0x8000000,0x0,0xe7f00000,0xe7f00000,0x0,0x0,0xe7f00000,0xe7f00000,0xe7f00000,0xfffff,0x0,0xfffff,0xe7f00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfd80d,0xfd80d,0x180d,0xfffff,0xfffff,0xfffff,0xfffff,0xfffff,0xfffff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x10000000,0x1afffff,0x1afffff,0x0,0x0,0x1afffff,0x1afffff,0x1afffff,0xba500000,0x20000000,0xba500000,0x1afffff,0x2000000,0x0,0x12000000,0x1a000000,0x1a000000,0x3a000000,0x3a000000,0x80000000,0x0,0x0,0xba500000,0xba500000,0xba500000,0xba500000,0xba500000,0xba500000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x0,0x0,0x7fe,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x4,0x4,0x4,0x4,0x4,0x4,};
   }

  /** Constructor with InputStream. */
  public LogoParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LogoParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LogoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LogoParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LogoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LogoParser(LogoParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LogoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[107];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 107; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
